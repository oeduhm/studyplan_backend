import psycopg

class Bd:
    def __init__(self, host="localhost", dbname="meubanco", user="meuuser", password="minhasenha", port=5432):
        try:
            self.conexao = psycopg.connect(host=host, dbname=dbname, user=user, password=password, port=port)
            self.cursor = self.conexao.cursor()
        except Exception:
            print(f"Erro ao estabelecer conexão com banco de dados.")
            exit()

    def salvar(self):
        self.conexao.commit()
    
    def salvar_consulta(self):
        return self.cursor.fetchall()

    def salvar_consulta1(self):
        return self.cursor.fetchone()

    def fechar(self):
        try:
            self.cursor.close()
        finally:
            self.conexao.close()

    
    # CRIACAO DAS TABELAS E DADOS DE TESTE

    # -- DDL --
    def criar_tabelas(self):
        try:
        # 1) usuario
            self.cursor.execute("""
        CREATE TABLE IF NOT EXISTS usuario (
            email TEXT PRIMARY KEY,
            nome  TEXT NOT NULL,
            senha TEXT NOT NULL
        );
        """)

        # 2) materia
            self.cursor.execute("""
        CREATE TABLE IF NOT EXISTS materia (
            codigo BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            titulo TEXT NOT NULL,
            descricao TEXT,
            emailUsuario TEXT NOT NULL REFERENCES usuario(email) ON DELETE CASCADE
        );
        """)

        # 3) tarefa
            self.cursor.execute("""
        CREATE TABLE IF NOT EXISTS tarefa (
            codigo BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            dataCriacao TIMESTAMPTZ DEFAULT now(),
            dataFinalizacao TIMESTAMPTZ,
            titulo TEXT NOT NULL,
            descricao TEXT,
            status TEXT NOT NULL, -- ex: 'A' ou 'F'
            emailUsuario TEXT NOT NULL REFERENCES usuario(email) ON DELETE CASCADE,
            codigoMateria BIGINT NOT NULL REFERENCES materia(codigo) ON DELETE CASCADE
        );
        """)

        # 4) anotacao 
            self.cursor.execute("""
        CREATE TABLE IF NOT EXISTS anotacao (
            codigo BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            dataCriacao TIMESTAMPTZ DEFAULT now(),
            descricao TEXT,
            emailUsuario TEXT NOT NULL REFERENCES usuario(email),
            codigoMateria BIGINT,
            codigoTarefa BIGINT,
            CONSTRAINT fk_anotacao_materia FOREIGN KEY (codigoMateria) REFERENCES materia(codigo) ON DELETE CASCADE,
            CONSTRAINT fk_anotacao_tarefa  FOREIGN KEY (codigoTarefa)  REFERENCES tarefa(codigo) ON DELETE CASCADE,
            CONSTRAINT chk_somente_um_destino CHECK (
                (codigoMateria IS NOT NULL AND codigoTarefa IS NULL) OR
                (codigoMateria IS NULL AND codigoTarefa IS NOT NULL)
            )
        );
        """)
            self.salvar()
        except Exception:
            print("Erro inesperado ao gerar as tabelas.")
            exit()

    # -- DML --
    def dados_teste(self):
        try:
        # usuarios
            self.cursor.execute("""
            INSERT INTO usuario (email, nome, senha)
            VALUES 
             ('joao@email.com', 'João Silva', '123456'),
             ('maria@email.com', 'Maria Souza', '654321')
            ON CONFLICT (email) DO NOTHING;
        """)

        # materias 
            self.cursor.execute("""
            INSERT INTO materia (codigo, titulo, descricao, emailUsuario)
            VALUES
             (1, 'Algoritmos',       'Introdução à lógica de programação e estruturas de repetição.', 'joao@email.com'),
             (2, 'Banco de Dados',   'Modelagem e SQL aplicado.',                                     'joao@email.com'),
             (3, 'Engenharia de Software', 'Conceitos de análise e desenvolvimento.',                 'joao@email.com'),
             (4, 'Estruturas de Dados',    'Listas, pilhas, filas e árvores.',                        'maria@email.com'),
             (5, 'Programação em C',       'Linguagem C aplicada a problemas práticos.',              'maria@email.com')
            ON CONFLICT DO NOTHING;
        """)

        # tarefas
            self.cursor.execute("""
            INSERT INTO tarefa (codigo, dataCriacao, dataFinalizacao, titulo, descricao, status, emailUsuario, codigoMateria)
            VALUES
             (1, now(), NULL, 'Lista de exercícios de Algoritmos', 'Fazer exercícios do capítulo 2.', 'A', 'joao@email.com', 1),
             (2, now(), NULL, 'Trabalho Banco de Dados', 'Criar diagrama ER.', 'A', 'joao@email.com', 2),
             (3, now(), now(), 'Resumo Engenharia de Software', 'Entregar resumo de metodologias.', 'F', 'joao@email.com', 3),
             (4, now(), NULL, 'Implementar lista encadeada', 'Exercício prático em C.', 'A', 'maria@email.com', 4),
             (5, now(), NULL, 'Estudar ponteiros', 'Revisar capítulo de ponteiros.', 'A', 'maria@email.com', 5),
             (6, now(), now(), 'Exercícios Banco de Dados', 'Queries de junção.', 'F', 'maria@email.com', 2),
             (7, now(), NULL, 'Resumo Estruturas de Dados', 'Preparar para prova.', 'A', 'joao@email.com', 4),
             (8, now(), NULL, 'Projeto final C', 'Desenvolver mini sistema em C.', 'A', 'maria@email.com', 5)
            ON CONFLICT DO NOTHING;
        """)

        # anotações 
            self.cursor.execute("""
            INSERT INTO anotacao (codigo, dataCriacao, descricao, emailUsuario, codigoMateria, codigoTarefa)
            VALUES
             (1, now(), 'Resumo sobre estruturas de repetição.', 'joao@email.com', 1, NULL),
             (2, now(), 'Exemplos de SELECT com JOIN.',          'joao@email.com', NULL, 6),
             (3, now(), 'Modelo cascata vs ágil.',                'joao@email.com', NULL, 3),
             (4, now(), 'Resumo de listas encadeadas.',           'maria@email.com', NULL, 4),
             (5, now(), 'Comandos básicos em C.',                 'maria@email.com', 5, NULL),
             (6, now(), 'Checklist final do projeto C.',          'maria@email.com', NULL, 8),
             (7, now(), 'Revisar teoria de filas e pilhas.',      'joao@email.com', NULL, 7),
             (8, now(), 'Dúvidas sobre SQL avançado.',            'maria@email.com', 2, NULL)
            ON CONFLICT DO NOTHING;
        """)
            self.salvar()
        except Exception:
            print("Erro inesperado ao inserir dados nas tabelas.")
            exit()

